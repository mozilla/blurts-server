version: 2.1

executors:
    node:
        docker:
            - image: cimg/node:18.12.1
              auth:
                username: $DOCKER_USER
                password: $DOCKER_PASS
    python:
        docker:
            - image: cimg/python:3.9.7
              auth:
                username: $DOCKER_USER
                password: $DOCKER_PASS
    ubuntu:
        machine:
            image: ubuntu-2004:202107-02

    node_with_postgres:
        parameters:
            postgres_version:
                description: "Which cimg/postgres tag to use"
                type: string
        docker:
            - image: cimg/node:18.12
              auth:
                username: $DOCKER_USER
                password: $DOCKER_PASS
            - image: cimg/postgres:<< parameters.postgres_version >>
              environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: 93e389316eaf4ea2be4010d526cc1468
                  POSTGRES_DB: test-circle
              auth:
                  username: $DOCKER_USER
                  password: $DOCKER_PASS

orbs:
    node: circleci/node@5.0.2
    python: circleci/python@1.4.0
    heroku: circleci/heroku@1.2.6

jobs:
    lint-js:
        executor: node
        steps:
            - checkout
            - node/install-packages
            - run: npm run lint:js
            - run: npm run lint:ts
    lint-css:
        executor: node
        steps:
            - checkout
            - node/install-packages
            - run: npm run lint:css
    lint-l10n:
        executor: python
        steps:
            - checkout
            - run: pip install compare-locales
            - run:
                  name: Lint and compare locales
                  command: |
                      moz-l10n-lint l10n.toml
                      compare-locales l10n.toml . `ls locales`
    unit-tests:
        executor: ubuntu
        environment:
            DATABASE_URL: postgresql://postgres:test-pass@localhost/blurts
        steps:
            - checkout
            - run:
                name: Install Postgres
                # Installing Postgres on a host machine. 
                # Originally attempted to use a container, but communication between container-within-a-container is not well supported currently
                # The solutions here were attempted without success: https://stackoverflow.com/questions/48546124/what-is-linux-equivalent-of-host-docker-internal
                command: |
                    sudo apt-get update
                    sudo apt-get install postgresql
                    pg_isready
            - run:
                name: Create test database
                command: |
                    sudo -u postgres createdb test-blurts | cat
                    # Set password to allow Docker connection
                    sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'test-pass';" | cat
            - run:
                name: Build app container
                command: docker build -t blurts-server .
            - run:
                name: Test Code
                command: |
                    docker run --network="host" \
                    -e NODE_ENV=tests \
                    -e DATABASE_URL=$DATABASE_URL \
                    -e HIBP_KANON_API_TOKEN=$HIBP_KANON_API_TOKEN \
                    -e COVERALLS_SERVICE_NAME=circleci \
                    -e COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN \
                    -e COVERALLS_GIT_BRANCH=$CIRCLE_BRANCH \
                    blurts-server npm test

    unit-tests-psql:
        parameters:
            postgres_version:
                description: "Which cimg/postgres tag to use"
                type: string
        executor:
            name: node_with_postgres
            postgres_version: << parameters.postgres_version >>
        steps:
            - checkout
            - node/install-packages
            - run: sudo apt-get update
            - run: sudo apt-get install postgresql-client
            - run:
                name: install dockerize
                command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
                environment:
                    DOCKERIZE_VERSION: v0.6.1
            - run:
                name: Wait for db
                command: dockerize -wait tcp://localhost:5432 -timeout 1m
            - run:
                name: Use default .env
                command: cp .env-dist .env
            - run:
                name: Test Code
                command: |
                    NODE_ENV=tests \
                    DATABASE_URL=postgresql://postgres:93e389316eaf4ea2be4010d526cc1468@localhost/circle \
                    HIBP_KANON_API_TOKEN=$HIBP_KANON_API_TOKEN \
                    COVERALLS_SERVICE_NAME=circleci \
                    COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN \
                    COVERALLS_GIT_BRANCH=$CIRCLE_BRANCH \
                    npm test

    deploy:
        docker:
            - image: docker:stable-git
              auth:
                username: $DOCKER_USER
                password: $DOCKER_PASS
        working_directory: /dockerflow
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Create version.json
                # create version.json per https://github.com/mozilla-services/Dockerflow/blob/main/docs/version_object.md
                command: |
                    printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
                    "$CIRCLE_SHA1" \
                    "$CIRCLE_TAG" \
                    "$CIRCLE_PROJECT_USERNAME" \
                    "$CIRCLE_PROJECT_REPONAME" \
                    "$CIRCLE_BUILD_URL" > version.json
            - run:
                name: Build Docker image
                command: |
                  docker build --tag blurts-server \
                  --build-arg SENTRY_RELEASE="$CIRCLE_TAG" \
                  .
            - run:
                name: Deploy to Dockerhub
                command: |
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    if [ "${CIRCLE_BRANCH}" == "main" ]; then
                        # deploy main
                        docker tag blurts-server ${DOCKERHUB_REPO}:latest
                        docker push ${DOCKERHUB_REPO}:latest
                    elif  [ ! -z "${CIRCLE_TAG}" ]; then
                        # deploy a release tag...
                        echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                        docker tag blurts-server "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                        docker images
                        docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                    fi

    deploy_static:
        executor: python
        steps:
            - checkout
            - run:
                  name: Install AWS CLI
                  command: pip install awscli
            - run:
                  name: Sync static content to S3
                  command: ./.circleci/scripts/sync-static

    deploy_heroku:
        # Attempt to deploy, but do not fail job if the push fails. The push will fail if a
        # developer has manually pushed a branch, usually for review purposes. This command
        # is based on:
        # https://github.com/CircleCI-Public/heroku-orb/blob/master/src/jobs/deploy-via-git.yml
        # https://github.com/CircleCI-Public/heroku-orb/blob/master/src/commands/deploy-via-git.yml
        executor: heroku/default
        parameters:
            app-name:
                description: "The name of the Heroku App"
                type: string
        steps:
            - heroku/install
            - heroku/check-authentication
            - checkout
            - run:
                  name: Attempt to deploy to Heroku via git push
                  command: |
                      set -x
                      heroku_url="https://heroku:${HEROKU_API_KEY}@git.heroku.com/<< parameters.app-name >>.git"
                      git push -f $heroku_url $CIRCLE_BRANCH:main

workflows:
    lint-and-test:
        jobs:
            - lint-js
            - lint-css
            - lint-l10n
            - unit-tests:
                filters:
                    tags:
                        only: /.*/
            - unit-tests-psql:
                name: "unit-tests on psql 9.6"
                postgres_version: "9.6.24"
                filters:
                    tags:
                        only: /.*/
            - unit-tests-psql:
                name: "unit-tests on psql 13.7"
                postgres_version: "13.7"
                filters:
                    tags:
                        only: /.*/
            - deploy:
                requires:
                    - unit-tests
                filters:
                    tags:
                        only: /.*/
                    branches:
                        only: 
                            - main
            - deploy_static:
                filters:
                    branches:
                        only: 
                            - main
            - deploy_heroku:
                name: Deploy main to Heroku
                app-name: $HEROKU_MAIN_APP_NAME
                requires:
                    - unit-tests
                filters:
                    branches:
                        only: main

            - deploy_heroku:
                name: Deploy l10n to Heroku
                app-name: $HEROKU_LOCALIZATION_APP_NAME
                requires:
                    - unit-tests
                filters:
                    branches:
                        only: localization
