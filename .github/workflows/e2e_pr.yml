name: Monitor e2e Smoke Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blurts
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.11

      - name: Install dependencies
        run: npm ci
      - name: Copy env var
        run: cp .env-dist .env
      - name: Setting up postgres
        run: npm run db:migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/blurts
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV


      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

      - name: Setup Playwright Browser
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        if: github.actor != 'dependabot[bot]'
        run: npm run e2e:smoke
        timeout-minutes: 10
        env:
          E2E_TEST_ENV: ${{ inputs.environment != null && inputs.environment || 'local' }}
          E2E_TEST_BASE_URL: ${{ secrets.E2E_TEST_BASE_URL }}
          E2E_TEST_ACCOUNT_EMAIL: ${{ secrets.E2E_TEST_ACCOUNT_EMAIL }}
          E2E_TEST_ACCOUNT_PASSWORD: ${{ secrets.E2E_TEST_ACCOUNT_PASSWORD }}
          ADMINS: ${{ secrets.ADMINS }}
          FXA_ENABLED: true
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          ONEREP_API_KEY: ${{ secrets.ONEREP_API_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/blurts
          HIBP_KANON_API_TOKEN: ${{ secrets.HIBP_KANON_API_TOKEN }}
          HIBP_API_TOKEN: ${{ secrets.HIBP_API_TOKEN }}
          # Our tests are currently set up to expect accounts to act like
          # old user accounts, so let's pretend they all are:
          BROKER_SCAN_RELEASE_DATE: "3000-12-31"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: src/e2e/test-results/
          retention-days: 30
