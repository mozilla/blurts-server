/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * In lieu of https://bugzilla.mozilla.org/show_bug.cgi?id=1863946,
 * this module manually generates type definitions that make the event data
 * types accessible to calling code, to enable the `useTelemetry` wrapper.
 */

import fs from "fs/promises";
import { resolve } from "path";

const GLEAN_APP_DIR = "src/telemetry";
const GLEAN_GENERATED_DIR = resolve(GLEAN_APP_DIR, "generated");
const MAP_FILE_NAME = "_map.ts";

fs.writeFile(
  resolve(GLEAN_GENERATED_DIR, MAP_FILE_NAME),
  await generateTypeMap(),
);

async function generateTypeMap() {
  const filenames = await fs.readdir(GLEAN_GENERATED_DIR);
  const moduleNames = filenames
    .filter(
      (filename) => filename.endsWith(".ts") && filename !== MAP_FILE_NAME,
    )
    .map((filename) => filename.replace(".ts", ""));
  const typeMapByModule = await Promise.all(
    moduleNames.map(async (moduleName) => [
      moduleName,
      await getTypeMap(moduleName),
    ]),
  );

  const eventTypeDefsString = typeMapByModule
    .map(([moduleName, typeMap]) => {
      return typeMap
        .map(([eventName, eventTypeDef]) => {
          return `type EventData_${moduleName}_${eventName} = ${eventTypeDef};`;
        })
        .join("\n");
    })
    .join("\n");

  const typeMapString = typeMapByModule
    .map(([moduleName, typeMap]) => {
      return (
        `  ${moduleName}: {\n` +
        typeMap
          .map(
            ([eventName, _eventTypeDef]) =>
              `    ${eventName}: EventData_${moduleName}_${eventName},`,
          )
          .join("\n") +
        `\n  }`
      );
    })
    .join("\n");

  const typeMapContents = `/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED BY the \`build-glean-types\` script. DO NOT EDIT. DO NOT COMMIT.
  
${eventTypeDefsString}
  
export type GleanMetricMap = {\n${typeMapString}\n};
`;

  return typeMapContents;
}

/**
 * @param {string} moduleName
 */
async function getTypeMap(moduleName) {
  const filePath = resolve(GLEAN_GENERATED_DIR, `${moduleName}.ts`);
  const fileContents = await fs.readFile(filePath, "utf-8");
  const eventNameAndTypeRegex =
    /export const (.+?) = new EventMetricType<(.+?)>/gs;
  /** @type {Array<[string, string, string]>} */
  const matches = Array.from(fileContents.matchAll(eventNameAndTypeRegex));
  return matches.map(([_match, eventName, eventTypeDef]) => [
    eventName,
    eventTypeDef,
  ]);
}
