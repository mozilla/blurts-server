/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This file was auto-generated by `npm run build-moscary-types`.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/profiles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a Profile
     *
     * @description Create a representation of a single user
     */
    post: operations["createProfile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieves a Profile
     *
     * @description This resource represents an individual user The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup).
     */
    get: operations["getProfileById"];
    /**
     * Update a profile (replaces all fields with provided values)
     *
     * @description Updates the specified profile. All fields will be replaced by data in the request. Empty and absent fields will be deleted. A profile is updated promptly. When a user adds some new personal details such as an additional address, phone number, etc., all irrelevant scan results are filtered out of a user profile. It means that all irrelevant scan results found or sent to opt out will disappear from the user profile. To find these filtered scan results, use the event type scan_result.filtered of event logs. If an irrelevant scan result has already been deleted from a data broker site and assigned the removed status, it is not filtered out and stays in the removed scan results of a profile. When the profile is updated, no scan is launched immediately. All new scan results of a person will only be found after the next scan is complete. It means that we will perform our next search based on the information from the updated profile in the next scheduled scan. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup). (legacy lookup).
     */
    put: operations["updateProfileById"];
    post?: never;
    /**
     * Delete a profile (cannot be undone)
     *
     * @description Permanently deletes a profile. It cannot be undone. In order to delete an active profile make sure you deactivate it first. If you do not do this, it will be deactivated automatically prior to the deletion. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup).
     */
    delete: operations["deleteProfileById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{id}/activate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Activates a Profile
     *
     * @description Changes profile status to `active`. The `active` status allows to initiate opt-out and profile monitoring. At first profile activation scan with `initial` reason will be created. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup).
     */
    put: operations["activateProfileById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{id}/deactivate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Deactivates a Profile
     *
     * @description Changes profiles status to `inactive`. The `inactive` status prohibit running scans, initiating opt-out and profile monitoring. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup).
     */
    put: operations["deactivateProfileById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{id}/optout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Opt-out a Profile
     *
     * @description Runs opt-out process for each scan result associated with the profile with the `new` status. Opt-out can be run only for a profile with the `active` status. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep Profile ID (legacy lookup).
     */
    post: operations["optOutProfileById"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{profile_id}/scans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of Scans for a Profile */
    get: operations["getScansByProfileId"];
    put?: never;
    /**
     * Launch a Scan
     *
     * @description Launches a scan. Scanning is a process of searching scan results by profile on data broker websites.
     */
    post: operations["createScanByProfileId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{profile_id}/scans/{scan_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve details of a Scan */
    get: operations["getScan"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/scan-results": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns a list of all ScanResults
     *
     * @description A ScanResult represents a single scan result
     */
    get: {
      parameters: {
        query: {
          /** @description The page offset for the response (starting at 1) */
          page?: components["parameters"]["pageParam"];
          /** @description The number of results to return per page */
          per_page?: components["parameters"]["perPageParam"];
          /** @description Filter scan results by status. If not provided, scan results with any status will be returned. */
          status?:
            | "new"
            | "optout_in_progress"
            | "waiting_for_verification"
            | "removed";
          /** @description Filter scan results by profile ID. */
          profile_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description The ScanResults response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["ScanResult"][];
              meta?: components["schemas"]["Meta"];
              links?: components["schemas"]["Links"];
            };
          };
        };
        422: components["responses"]["BadInputError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/scan-results/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Show
     *
     * @description Returns a specific Scan Result that was found on a data broker site based on the information in the Profile. Please note that a data broker may have more than one home address, phone number, email address, and relative of a user. The {id} path parameter can be a string (uuid) or an integer which corresponds to a OneRep ScanResult ID (legacy lookup).
     */
    get: operations["getScanResultById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/scan-results/{id}/resolve": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a Scan Result to mark it as manually resolved
     *
     * @description Updates the specified Scan Result to mark it as manually resolved. The {id} path parameter is a UUID.
     */
    post: operations["resolveScanResultById"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/scan-results/{id}/unresolve": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update a Scan Result to unmark it as manually resolved
     *
     * @description Updates the specified Scan Result to unmark it as manually resolved. The {id} path parameter is a UUID.
     */
    post: operations["unresolveScanResultById"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brokers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Brokers
     *
     * @description Returns a paginated list of known data brokers.
     */
    get: operations["listBrokers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brokers/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Broker by ID
     *
     * @description Retrieves details for a specific data broker.
     */
    get: operations["getBrokerById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/profiles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a mock profile (sandbox only)
     *
     * @description Create a mock profile for testing. Only available when APP_ENV !== 'production'.
     */
    post: operations["adminCreateProfile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/profiles/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get mock profile (sandbox only)
     *
     * @description Retrieve a mock profile by UUID.
     */
    get: operations["adminGetProfile"];
    /**
     * Update mock profile (sandbox only)
     *
     * @description Update a mock profile by UUID.
     */
    put: operations["adminUpdateProfile"];
    post?: never;
    /**
     * Delete mock profile (sandbox only)
     *
     * @description Delete a mock profile by UUID.
     */
    delete: operations["adminDeleteProfile"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/scans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List mock scans (sandbox only)
     *
     * @description List mock scans for a given profile ID.
     */
    get: operations["adminListScans"];
    put?: never;
    /**
     * Create mock scan (sandbox only)
     *
     * @description Create a mock scan for a profile.
     */
    post: operations["adminCreateScan"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/scans/{scan_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get mock scan by ID (sandbox only)
     *
     * @description Retrieve a mock scan by scan ID.
     */
    get: operations["adminGetScan"];
    put?: never;
    post?: never;
    /**
     * Delete mock scan (sandbox only)
     *
     * @description Delete a mock scan by UUID.
     */
    delete: operations["adminDeleteScan"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/scan-results": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List mock scan results (sandbox only)
     *
     * @description List mock scan results by profile_id and optionally status.
     */
    get: operations["adminListScanResults"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/sandbox/scan-results/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get mock scan result by ID (sandbox only)
     *
     * @description Retrieve a mock scan result by ID.
     */
    get: operations["adminGetScanResult"];
    /**
     * Update mock scan result status (sandbox only)
     *
     * @description Update a mock scan result status by UUID.
     */
    put: operations["adminUpdateScanResultStatus"];
    post?: never;
    /**
     * Delete mock scan result (sandbox only)
     *
     * @description Delete a mock scan result by UUID.
     */
    delete: operations["adminDeleteScanResult"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Links: {
      /** Format: uri */
      first?: string;
      /** Format: uri */
      last?: string;
      prev?: string | null;
      next?: string | null;
    };
    Meta: {
      current_page?: number;
      from?: number;
      last_page?: number;
      /** Format: uri */
      path?: string;
      per_page?: number;
      to?: number;
      total?: number;
    };
    ObjectBase: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uri */
      url?: string;
    };
    ProfileLinkBase: components["schemas"]["ObjectBase"] & {
      /** Format: uuid */
      profile_id: string;
    };
    Profile: components["schemas"]["ObjectBase"] & {
      first_name: string;
      last_name: string;
      middle_name?: string;
      /** Format: date */
      birth_date: string;
      first_names: (components["schemas"]["ProfileLinkBase"] & {
        first_name: string;
      })[];
      last_names: (components["schemas"]["ProfileLinkBase"] & {
        last_name: string;
      })[];
      middle_names: (components["schemas"]["ProfileLinkBase"] & {
        middle_name: string;
      })[];
      emails: (components["schemas"]["ProfileLinkBase"] & {
        /** Format: email */
        email: string;
      })[];
      phone_numbers: (components["schemas"]["ProfileLinkBase"] & {
        number: string;
      })[];
      addresses: (components["schemas"]["ProfileLinkBase"] & {
        /** @description 2-letter state code (USA) */
        state: string;
        city: string;
        zip?: string;
        address_line?: string;
      })[];
      /** @enum {string} */
      status: "active" | "inactive";
    };
    ProfileInput: {
      first_name: string;
      last_name: string;
      middle_name?: string;
      /** Format: date */
      birth_date: string;
      first_names?: {
        first_name: string;
      }[];
      last_names?: {
        last_name: string;
      }[];
      middle_names?: {
        middle_name: string;
      }[];
      emails?: {
        /** Format: email */
        email: string;
      }[];
      phone_numbers?: {
        number: string;
      }[];
      addresses: {
        /** @description 2-letter state code (USA) */
        state: string;
        city: string;
        zip?: string;
        address_line?: string;
      }[];
      /** @enum {string} */
      status?: "active" | "inactive";
    };
    ProfileAdminInput: components["schemas"]["ProfileInput"];
    /** @description A scan is a process of searching for Profiles on data brokers. */
    Scan: components["schemas"]["ObjectBase"] & {
      /** Format: uuid */
      profile_id: string;
      /** @enum {string} */
      status: "in_progress" | "finished";
      /** @enum {string} */
      reason: "initial" | "monitoring" | "manual";
    };
    /** @description A collection of Scans (for a profile) */
    ScanPage: {
      data: components["schemas"]["Scan"][];
      links: components["schemas"]["Links"];
      meta: components["schemas"]["Meta"];
    };
    /** @description Generic error response with a message string */
    BaseErrorMessage: {
      message?: string;
    };
    ScanResult: components["schemas"]["ObjectBase"] & {
      /** Format: uuid */
      profile_id?: string;
      /** Format: uuid */
      scan_id: string;
      first_name: string;
      last_name: string;
      middle_name?: string;
      age?: number;
      /** @enum {string} */
      status:
        | "new"
        | "optout_in_progress"
        | "waiting_for_verification"
        | "removed";
      /**
       * @description Method used or planned for removal request
       * @enum {string|null}
       */
      removal_method?:
        | "email"
        | "form"
        | "manual"
        | "unrequested"
        | "email_with_verification"
        | null;
      /**
       * @description Internal tracking status for verification engine
       * @enum {string|null}
       */
      removal_status?:
        | "match_found"
        | "removal_requested"
        | "ready_for_verification"
        | "verification_pending"
        | "removed_unverified"
        | "failed"
        | "removed_verified"
        | "recheck_due"
        | "resurfaced"
        | null;
      /** @description Response text from removal attempt */
      removal_response?: string | null;
      /**
       * @description Number of verification attempts made
       * @default 0
       */
      verification_attempts: number;
      /**
       * Format: date-time
       *
       * @description Timestamp of last verification attempt
       */
      last_verified_at?: string | null;
      addresses: {
        city?: string;
        state?: string;
        street?: string;
        zip?: string;
      }[];
      phones: string[];
      emails: string[];
      relatives: string[];
      screenshot?: string;
      optout_attempts?: number;
      /** Format: date-time */
      last_optout_at?: string | null;
      /** Format: uri */
      link: string;
      data_broker: string;
      data_broker_id?: number;
      manually_resolved?: boolean;
      source?: string;
    };
    ScanResultAdminInput: {
      /** @enum {string} */
      status:
        | "new"
        | "optout_in_progress"
        | "waiting_for_verification"
        | "removed";
    };
    /** @description Represents a data broker website/entity. */
    Broker: {
      /** @description Unique identifier for the Broker. */
      id: number;
      /** @description The name of the data broker. */
      name: string;
      /**
       * @description The current operational status of the broker integration.
       * @enum {string}
       */
      status: "active" | "on_hold" | "inactive";
      /**
       * Format: uri
       *
       * @description The URL to retrieve this specific Broker resource.
       */
      url: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @description Internal notes about the broker. */
      notes?: string | null;
      /** @description Information about the broker's ownership. */
      ownership?: string | null;
      /**
       * Format: uri
       *
       * @description URL to the broker's opt-out page.
       */
      opt_out_page?: string | null;
      /** @description Pattern or strategy used for searching this broker. */
      search_pattern?: string | null;
    };
    /** @description A collection of Brokers */
    BrokerPage: {
      data: components["schemas"]["Broker"][];
      links: components["schemas"]["Links"];
      meta: components["schemas"]["Meta"];
    };
  };
  responses: {
    /** @description Error response for input which failed validation */
    BadInputError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          message: string;
          errors?: {
            [key: string]: string[];
          };
        };
      };
    };
    /** @description The specified resource was not found */
    "404NotFound": {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["BaseErrorMessage"];
      };
    };
  };
  parameters: {
    /** @description The page offset for the response (starting at 1) */
    pageParam: number;
    /** @description The number of results to return per page */
    perPageParam: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  createProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      422: components["responses"]["BadInputError"];
    };
  };
  getProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  updateProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileInput"];
      };
    };
    responses: {
      /** @description The updated Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  deleteProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The resource was deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  activateProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description The profile is already active */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorMessage"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  deactivateProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description The profile is already inactive */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorMessage"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  optOutProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The opt-out process was started successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The profile is inactive or ineligible for opt-out */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorMessage"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  getScansByProfileId: {
    parameters: {
      query?: {
        /** @description The page offset for the response (starting at 1) */
        page?: components["parameters"]["pageParam"];
        /** @description The number of results to return per page */
        per_page?: components["parameters"]["perPageParam"];
        /** @description Filter scans by status. Possible value are `in_progress` and `finished` */
        status?: "finished" | "in_progress";
      };
      header?: never;
      path: {
        /** @description Profile ID */
        profile_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of Scans for a Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanPage"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  createScanByProfileId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        profile_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The launched Scan */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Scan"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseErrorMessage"];
        };
      };
      404: components["responses"]["404NotFound"];
    };
  };
  getScan: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Profile ID */
        profile_id: string;
        /** @description Scan ID */
        scan_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The Scan */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Scan"];
        };
      };
      404: components["responses"]["404NotFound"];
    };
  };
  getScanResultById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the scan result */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single ScanResult */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanResult"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  resolveScanResultById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the scan result (UUID only; OneRep numeric IDs not supported) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The updated Scan Result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanResult"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  unresolveScanResultById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the scan result (UUID only; OneRep numeric IDs not supported) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The updated Scan Result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanResult"];
        };
      };
      404: components["responses"]["404NotFound"];
      422: components["responses"]["BadInputError"];
    };
  };
  listBrokers: {
    parameters: {
      query?: {
        /** @description The page offset for the response (starting at 1) */
        page?: components["parameters"]["pageParam"];
        /** @description The number of results to return per page */
        per_page?: components["parameters"]["perPageParam"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of Brokers. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrokerPage"];
        };
      };
      422: components["responses"]["BadInputError"];
    };
  };
  getBrokerById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the Broker to retrieve. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single Broker. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Broker"];
        };
      };
      422: components["responses"]["BadInputError"];
    };
  };
  adminCreateProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileAdminInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  adminGetProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  adminUpdateProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileAdminInput"];
      };
    };
    responses: {
      /** @description The updated Profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  adminDeleteProfile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  adminListScans: {
    parameters: {
      query: {
        profile_id: string;
        status?: "in_progress" | "finished";
        /** @description The page offset for the response (starting at 1) */
        page?: components["parameters"]["pageParam"];
        /** @description The number of results to return per page */
        per_page?: components["parameters"]["perPageParam"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of scans */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanPage"];
        };
      };
    };
  };
  adminCreateScan: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          profile_id: string;
        };
      };
    };
    responses: {
      /** @description Created scan */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Scan"];
        };
      };
    };
  };
  adminGetScan: {
    parameters: {
      query: {
        profile_id: string;
      };
      header?: never;
      path: {
        scan_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A scan object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Scan"];
        };
      };
    };
  };
  adminDeleteScan: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        scan_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  adminListScanResults: {
    parameters: {
      query: {
        profile_id: string;
        status?:
          | "new"
          | "optout_in_progress"
          | "waiting_for_verification"
          | "removed";
        /** @description The page offset for the response (starting at 1) */
        page?: components["parameters"]["pageParam"];
        /** @description The number of results to return per page */
        per_page?: components["parameters"]["perPageParam"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of mock scan results */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data?: components["schemas"]["ScanResult"][];
            meta?: components["schemas"]["Meta"];
            links?: components["schemas"]["Links"];
          };
        };
      };
    };
  };
  adminGetScanResult: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single mock scan result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanResult"];
        };
      };
    };
  };
  adminUpdateScanResultStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScanResultAdminInput"];
      };
    };
    responses: {
      /** @description The updated ScanResult */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScanResult"];
        };
      };
    };
  };
  adminDeleteScanResult: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
